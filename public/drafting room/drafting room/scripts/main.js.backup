// Project management for Drafting Room
console.log('Drafting Room script loaded');

// Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBi23iRWj7rE4gMssuoKx8NxO5cdnUNj7E",
  authDomain: "pfp-data-14b9a.firebaseapp.com",
  projectId: "pfp-data-14b9a",
  storageBucket: "pfp-data-14b9a.firebasestorage.app",
  messagingSenderId: "932276405722",
  appId: "1:932276405722:web:d9cd4cc1a5a4856ee82ce3",
  measurementId: "G-DGYDTSHHV8"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();

// SheetDB URL for user management
const SHEETDB_URL = "https://sheetdb.io/api/v1/14f5e5la3laxh";

// Global state
let currentProject = null;
let allProjects = {};
let currentUser = null;

// Generate unique IDs
function generateId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// Global variables
let currentProject = null;

// Get DOM elements
const projectList = document.getElementById('project-list');
const newProjectInput = document.getElementById('new-project-name');
const createProjectBtn = document.getElementById('create-project');
const projectDashboard = document.getElementById('project-dashboard');
const storyCheckSection = document.getElementById('story-check');
const storyCheckInput = document.getElementById('story-check-input');
const saveStoryCheckBtn = document.getElementById('save-story-check');
const outlineSection = document.getElementById('outline');
const outlineContainer = document.getElementById('outline-container');
const addSceneBtn = document.getElementById('add-scene');
const settingsSection = document.getElementById('settings-docs');
const settingsContainer = document.getElementById('settings-container');
const addSettingBtn = document.getElementById('add-setting');
const charactersSection = document.getElementById('character-docs');
const charactersContainer = document.getElementById('characters-container');
const addCharacterBtn = document.getElementById('add-character');
const sceneEditor = document.getElementById('scene-editor');
const settingEditor = document.getElementById('setting-editor');
const characterEditor = document.getElementById('character-editor');

// Navigation buttons
const goToOutlineBtn = document.getElementById('go-to-outline');
const goToSettingsBtn = document.getElementById('go-to-settings');
const goToCharactersBtn = document.getElementById('go-to-characters');
const goToVisualizerBtn = document.getElementById('go-to-visualizer');

// Scene editor elements
const sceneEditorTitle = document.getElementById('scene-editor-title');
const sceneEditorInput = document.getElementById('scene-editor-input');
const saveSceneBtn = document.getElementById('save-scene');
const closeSceneBtn = document.getElementById('close-scene');

// Setting editor elements
const settingEditorTitle = document.getElementById('setting-editor-title');
const settingNameInput = document.getElementById('setting-name');
const settingDescriptionInput = document.getElementById('setting-description');
const settingNotesInput = document.getElementById('setting-notes');
const saveSettingBtn = document.getElementById('save-setting');
const closeSettingBtn = document.getElementById('close-setting');

// Character editor elements
const characterEditorTitle = document.getElementById('character-editor-title');
const characterNameInput = document.getElementById('character-name');
const characterDescriptionInput = document.getElementById('character-description');
const characterBackgroundInput = document.getElementById('character-background');
const characterNotesInput = document.getElementById('character-notes');
const saveCharacterBtn = document.getElementById('save-character');
const closeCharacterBtn = document.getElementById('close-character');

// Current editing IDs
let currentEditingSceneId = null;
let currentEditingSettingId = null;
let currentEditingCharacterId = null;

function showSection(id) {
  console.log('showSection called with id:', id);
  sceneEditor.classList.add('hidden');
  outlineSection.classList.add('hidden');
  storyCheckSection.classList.add('hidden');
  settingsSection.classList.add('hidden');
  charactersSection.classList.add('hidden');
  settingEditor.classList.add('hidden');
  characterEditor.classList.add('hidden');
  
  // Also hide visualizer section
  const visualizerSection = document.getElementById('visualizer-section');
  if (visualizerSection) {
    visualizerSection.classList.add('hidden');
  }
  
  const targetSection = document.getElementById(id);
  if (targetSection) {
    targetSection.classList.remove('hidden');
    console.log('Successfully showed section:', id);
  } else {
    console.error('Section not found:', id);
  }
}

// Utility helpers
function saveProjectData(name, data) {
  localStorage.setItem(`project:${name}`, JSON.stringify(data));
}

function loadProjectData(name) {
  const raw = localStorage.getItem(`project:${name}`);
  return raw ? JSON.parse(raw) : null;
}

function listAllProjects() {
  return Object.keys(localStorage)
    .filter(k => k.startsWith('project:'))
    .map(k => k.slice(8));
}

// Settings and Characters helper functions
function addSettingToProject(project, setting) {
  if (!project.settings) {
    project.settings = [];
  }
  project.settings.push({
    id: generateId(),
    name: setting.name,
    description: setting.description,
    notes: setting.notes
  });
}

function addCharacterToProject(project, character) {
  if (!project.characters) {
    project.characters = [];
  }
  project.characters.push({
    id: generateId(),
    name: character.name,
    description: character.description,
    background: character.background,
    notes: character.notes
  });
}

function updateSettingInProject(project, settingId, updatedSetting) {
  const index = project.settings.findIndex(s => s.id === settingId);
  if (index !== -1) {
    project.settings[index] = { ...project.settings[index], ...updatedSetting };
  }
}

function updateCharacterInProject(project, characterId, updatedCharacter) {
  const index = project.characters.findIndex(c => c.id === characterId);
  if (index !== -1) {
    project.characters[index] = { ...project.characters[index], ...updatedCharacter };
  }
}

function deleteSettingFromProject(project, settingId) {
  project.settings = project.settings.filter(s => s.id !== settingId);
}

function deleteCharacterFromProject(project, characterId) {
  project.characters = project.characters.filter(c => c.id !== characterId);
}

function refreshProjectList() {
  projectList.innerHTML = '';
  const projects = listAllProjects();
  projects.forEach(projectName => {
    const projectDiv = document.createElement('div');
    projectDiv.className = 'project-item';
    projectDiv.innerHTML = `
      <span>${projectName}</span>
      <button onclick="loadProject('${projectName}')">Load</button>
      <button onclick="deleteProject('${projectName}')">Delete</button>
    `;
    projectList.appendChild(projectDiv);
  });
}

function createProject() {
  const name = newProjectInput.value.trim();
  if (!name) {
    alert('Please enter a project name');
    return;
  }

  const newProject = {
    name: name,
    storyCheck: '',
    scenes: [],
    settings: [],
    characters: []
  };

  saveProjectData(name, newProject);
  refreshProjectList();
  newProjectInput.value = '';
}

function loadProject(name) {
  const project = loadProjectData(name);
  if (project) {
    currentProject = project;
    storyCheckInput.value = project.storyCheck || '';
    projectDashboard.classList.add('hidden');
    storyCheckSection.classList.remove('hidden');
    renderOutline();
    renderSettings();
    renderCharacters();
  }
}

function deleteProject(name) {
  if (confirm(`Are you sure you want to delete project "${name}"?`)) {
    localStorage.removeItem(`project:${name}`);
    refreshProjectList();
  }
}

function saveStoryCheck() {
  if (currentProject) {
    currentProject.storyCheck = storyCheckInput.value;
    saveProjectData(currentProject.name, currentProject);
  }
}

function renderOutline() {
  outlineContainer.innerHTML = '';
  if (currentProject && currentProject.scenes) {
    currentProject.scenes.forEach(scene => {
      const sceneDiv = document.createElement('div');
      sceneDiv.className = 'scene-item';
      sceneDiv.innerHTML = `
        <h4>${scene.title}</h4>
        <p>${scene.content || 'No content'}</p>
        <button onclick="editScene('${scene.id}')">Edit</button>
        <button onclick="deleteScene('${scene.id}')">Delete</button>
      `;
      outlineContainer.appendChild(sceneDiv);
    });
  }
}

function renderSettings() {
  settingsContainer.innerHTML = '';
  if (currentProject && currentProject.settings && currentProject.settings.length > 0) {
    currentProject.settings.forEach(setting => {
      const settingDiv = document.createElement('div');
      settingDiv.className = 'setting-item';
      settingDiv.innerHTML = `
        <h4>${setting.name}</h4>
        <p>${setting.description || 'No description'}</p>
        <button onclick="editSetting('${setting.id}')">Edit</button>
        <button onclick="deleteSetting('${setting.id}')">Delete</button>
      `;
      settingsContainer.appendChild(settingDiv);
    });
  } else {
    settingsContainer.innerHTML = '<p>No settings created yet. Click "Add Setting" to create your first setting.</p>';
  }
}

function renderCharacters() {
  charactersContainer.innerHTML = '';
  if (currentProject && currentProject.characters && currentProject.characters.length > 0) {
    currentProject.characters.forEach(character => {
      const characterDiv = document.createElement('div');
      characterDiv.className = 'character-item';
      characterDiv.innerHTML = `
        <h4>${character.name}</h4>
        <p>${character.description || 'No description'}</p>
        <button onclick="editCharacter('${character.id}')">Edit</button>
        <button onclick="deleteCharacter('${character.id}')">Delete</button>
      `;
      charactersContainer.appendChild(characterDiv);
    });
  } else {
    charactersContainer.innerHTML = '<p>No characters created yet. Click "Add Character" to create your first character.</p>';
  }
}

function addScene() {
  const title = prompt('Enter scene title:');
  if (title && currentProject) {
    if (!currentProject.scenes) {
      currentProject.scenes = [];
    }
    currentProject.scenes.push({
      id: generateId(),
      title: title,
      content: ''
    });
    saveProjectData(currentProject.name, currentProject);
    renderOutline();
  }
}

function editScene(sceneId) {
  const scene = currentProject.scenes.find(s => s.id === sceneId);
  if (scene) {
    currentEditingSceneId = sceneId;
    sceneEditorTitle.textContent = `Edit Scene: ${scene.title}`;
    sceneEditorInput.value = scene.content || '';
    showSection('scene-editor');
  }
}

function saveScene() {
  if (currentEditingSceneId && currentProject) {
    const scene = currentProject.scenes.find(s => s.id === currentEditingSceneId);
    if (scene) {
      scene.content = sceneEditorInput.value;
      saveProjectData(currentProject.name, currentProject);
      renderOutline();
      showSection('outline');
    }
  }
}

function deleteScene(sceneId) {
  if (confirm('Are you sure you want to delete this scene?')) {
    currentProject.scenes = currentProject.scenes.filter(s => s.id !== sceneId);
    saveProjectData(currentProject.name, currentProject);
    renderOutline();
  }
}

function addSetting() {
  const name = prompt('Enter setting name:');
  if (name && currentProject) {
    const description = prompt('Enter setting description:') || '';
    addSettingToProject(currentProject, {
      name: name,
      description: description,
      notes: ''
    });
    saveProjectData(currentProject.name, currentProject);
    renderSettings();
  }
}

function editSetting(settingId) {
  const setting = currentProject.settings.find(s => s.id === settingId);
  if (setting) {
    currentEditingSettingId = settingId;
    settingEditorTitle.textContent = `Edit Setting: ${setting.name}`;
    settingNameInput.value = setting.name;
    settingDescriptionInput.value = setting.description || '';
    settingNotesInput.value = setting.notes || '';
    showSection('setting-editor');
  }
}

function saveSetting() {
  if (currentEditingSettingId && currentProject) {
    updateSettingInProject(currentProject, currentEditingSettingId, {
      name: settingNameInput.value,
      description: settingDescriptionInput.value,
      notes: settingNotesInput.value
    });
    saveProjectData(currentProject.name, currentProject);
    renderSettings();
    showSection('settings-docs');
  }
}

function deleteSetting(settingId) {
  if (confirm('Are you sure you want to delete this setting?')) {
    deleteSettingFromProject(currentProject, settingId);
    saveProjectData(currentProject.name, currentProject);
    renderSettings();
  }
}

function addCharacter() {
  const name = prompt('Enter character name:');
  if (name && currentProject) {
    const description = prompt('Enter character description:') || '';
    addCharacterToProject(currentProject, {
      name: name,
      description: description,
      background: '',
      notes: ''
    });
    saveProjectData(currentProject.name, currentProject);
    renderCharacters();
  }
}

function editCharacter(characterId) {
  const character = currentProject.characters.find(c => c.id === characterId);
  if (character) {
    currentEditingCharacterId = characterId;
    characterEditorTitle.textContent = `Edit Character: ${character.name}`;
    characterNameInput.value = character.name;
    characterDescriptionInput.value = character.description || '';
    characterBackgroundInput.value = character.background || '';
    characterNotesInput.value = character.notes || '';
    showSection('character-editor');
  }
}

function saveCharacter() {
  if (currentEditingCharacterId && currentProject) {
    updateCharacterInProject(currentProject, currentEditingCharacterId, {
      name: characterNameInput.value,
      description: characterDescriptionInput.value,
      background: characterBackgroundInput.value,
      notes: characterNotesInput.value
    });
    saveProjectData(currentProject.name, currentProject);
    renderCharacters();
    showSection('character-docs');
  }
}

function deleteCharacter(characterId) {
  if (confirm('Are you sure you want to delete this character?')) {
    deleteCharacterFromProject(currentProject, characterId);
    saveProjectData(currentProject.name, currentProject);
    renderCharacters();
  }
}

function closeSetting() {
  showSection('settings-docs');
}

function closeCharacter() {
  showSection('character-docs');
}

function closeScene() {
  showSection('outline');
}

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, setting up event listeners');
  
  // Project management
  createProjectBtn.addEventListener('click', createProject);
  saveStoryCheckBtn.addEventListener('click', saveStoryCheck);
  addSceneBtn.addEventListener('click', addScene);
  addSettingBtn.addEventListener('click', addSetting);
  addCharacterBtn.addEventListener('click', addCharacter);
  
  // Scene editor
  if (saveSceneBtn) saveSceneBtn.addEventListener('click', saveScene);
  if (closeSceneBtn) closeSceneBtn.addEventListener('click', closeScene);
  
  // Setting editor
  if (saveSettingBtn) saveSettingBtn.addEventListener('click', saveSetting);
  if (closeSettingBtn) closeSettingBtn.addEventListener('click', closeSetting);
  
  // Character editor
  if (saveCharacterBtn) saveCharacterBtn.addEventListener('click', saveCharacter);
  if (closeCharacterBtn) closeCharacterBtn.addEventListener('click', closeCharacter);
  
  // Navigation
  goToOutlineBtn.addEventListener('click', () => {
    console.log('Going to outline');
    showSection('outline');
  });
  goToSettingsBtn.addEventListener('click', () => {
    console.log('Going to settings');
    showSection('settings-docs');
  });
  goToCharactersBtn.addEventListener('click', () => {
    console.log('Going to characters');
    showSection('character-docs');
  });
  if (goToVisualizerBtn) {
    goToVisualizerBtn.addEventListener('click', () => {
      console.log('Going to visualizer');
      showSection('visualizer-section');
    });
  }
  
  // Initialize
  refreshProjectList();
  console.log('Event listeners set up successfully');
});

// Function to save user to Google Sheet
async function saveUserToSheet(user) {
  const userData = {
    user_id: user.uid,
    email: user.email,
    tokens_current: 0,
    tokens_total: 0,
    tokens_spent: 0,
    last_refill_date: new Date().toISOString(),
    role: "user",
    created_at: new Date().toISOString(),
    notes: ""
  };
  try {
    const response = await fetch(SHEETDB_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ data: userData })
    });
    const result = await response.json();
    console.log("Saved user to sheet:", result);
  } catch (err) {
    console.error("Error saving to sheet:", err.message);
  }
}

// Function to fetch user data from Google Sheet
async function getUserFromSheet(user_id) {
  try {
    // SheetDB lets you filter like this: /search?user_id=VALUE
    const response = await fetch(`${SHEETDB_URL}/search?user_id=${user_id}`);
    const data = await response.json();
    
    if (data.length > 0) {
      // Found the user
      const userRow = data[0];
      console.log("Fetched user:", userRow);
      return userRow;
    } else {
      // No user found
      console.log("No user found with id:", user_id);
      return null;
    }
  } catch (err) {
    console.error("Error fetching user from sheet:", err.message);
    return null;
  }
}

// Function to update user tokens in Google Sheet
async function updateUserTokens(user_id, newTokenValue) {
  try {
    // SheetDB PATCH endpoint, filter by user_id
    const url = `${SHEETDB_URL}/user_id/${user_id}`;
    const data = {
      tokens_current: newTokenValue
    };
    
    const response = await fetch(url, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ data })
    });
    
    const result = await response.json();
    console.log("Updated tokens:", result);
    return result;
  } catch (err) {
    console.error("Error updating tokens:", err.message);
    return null;
  }
}

// Function to spend tokens for a user
async function spendTokens(user_id, amount) {
  // 1. Fetch current user data
  const userRow = await getUserFromSheet(user_id);
  if (!userRow) {
    console.log("User not found.");
    return;
  }

  // 2. Check if they have enough tokens
  const currentTokens = parseInt(userRow.tokens_current, 10) || 0;
  if (currentTokens < amount) {
    console.log("Not enough tokens.");
    return;
  }

  // 3. Subtract and update tokens
  const newTokenValue = currentTokens - amount;
  await updateUserTokens(user_id, newTokenValue);

  // (Optional) Update tokens_spent and tokens_total
  const newTokensSpent = (parseInt(userRow.tokens_spent, 10) || 0) + amount;
  const url = `${SHEETDB_URL}/user_id/${user_id}`;
  
  try {
    await fetch(url, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ data: { tokens_spent: newTokensSpent } })
    });
  } catch (err) {
    console.error("Error updating tokens_spent:", err.message);
  }

  console.log(`Spent ${amount} tokens. New balance: ${newTokenValue}`);
}

// Firebase Authentication functions
async function signUp(email, password) {
  try {
    const userCredential = await auth.createUserWithEmailAndPassword(email, password);
    const user = userCredential.user;
    console.log("Signed up:", user.uid, user.email);
    // Add this:
    await saveUserToSheet(user);
    return user;
  } catch (error) {
    console.error("Signup error:", error.message);
  }
}

async function logIn(email, password) {
  try {
    const userCredential = await auth.signInWithEmailAndPassword(email, password);
    const user = userCredential.user;
    console.log("Logged in:", user.uid, user.email);
    
    // Fetch user's token data from Google Sheet
    const userRow = await getUserFromSheet(user.uid);
    if (userRow) {
      console.log("Current tokens:", userRow.tokens_current);
      // You can store this in a global variable or use it in your app
      window.currentUserData = userRow;
    } else {
      console.log("User not found in sheet - might need to be saved first");
    }
    
    return user;
  } catch (error) {
    console.error("Login error:", error.message);
  }
}

// SheetDB and Firebase Authentication
async function testSheetDB() {
  const testData = {
    user_id: "testuser",
    email: "test@example.com", 
    tokens_current: 0,
    tokens_total: 0,
    tokens_spent: 0,
    last_refill_date: new Date().toISOString(),
    role: "user",
    created_at: new Date().toISOString(),
    notes: "test row"
  };

  try {
    const response = await fetch(SHEETDB_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ data: testData })
    });
    
    const result = await response.json();
    console.log("Test row saved:", result);
  } catch (err) {
    console.error("Error saving to sheet:", err.message);
  }
}

// Call the test function
testSheetDB();

// Grab DOM elements
const projectList = document.getElementById('project-list');
const createProjectBtn = document.getElementById('create-project');
const newProjectInput = document.getElementById('new-project-name');
const storyCheckSection = document.getElementById('story-check');
const storyCheckInput = document.getElementById('story-check-input');
const saveStoryCheckBtn = document.getElementById('save-story-check');
const outlineSection = document.getElementById('outline');
const outlineContainer = document.getElementById('outline-container');
const addSceneBtn = document.getElementById('add-scene');
const sceneEditor = document.getElementById('scene-editor');
const sceneTitle = document.getElementById('scene-title');
const sceneText = document.getElementById('scene-text');
const saveSceneBtn = document.getElementById('save-scene');
const closeSceneBtn = document.getElementById('close-scene');
const wordCount = document.getElementById('word-count');
const sceneGoal = document.getElementById('scene-goal');
const sceneEmotion = document.getElementById('scene-emotion');
const sceneCharacters = document.getElementById('scene-characters');
const desireSlider = document.getElementById('desire-slider');
const conflictSlider = document.getElementById('conflict-slider');
const revealSlider = document.getElementById('reveal-slider');

// Settings and Characters elements
const settingsSection = document.getElementById('settings-docs');
const settingsContainer = document.getElementById('settings-container');
const addSettingBtn = document.getElementById('add-setting');
const settingEditor = document.getElementById('setting-editor');
const settingTitle = document.getElementById('setting-title');
const settingName = document.getElementById('setting-name');
const settingDescription = document.getElementById('setting-description');
const settingNotes = document.getElementById('setting-notes');
const saveSettingBtn = document.getElementById('save-setting');
const closeSettingBtn = document.getElementById('close-setting');

const charactersSection = document.getElementById('character-docs');
const charactersContainer = document.getElementById('characters-container');
const addCharacterBtn = document.getElementById('add-character');
const characterEditor = document.getElementById('character-editor');
const characterTitle = document.getElementById('character-title');
const characterName = document.getElementById('character-name');
const characterDescription = document.getElementById('character-description');
const characterBackground = document.getElementById('character-background');
const characterNotes = document.getElementById('character-notes');
const saveCharacterBtn = document.getElementById('save-character');
const closeCharacterBtn = document.getElementById('close-character');

// Navigation buttons
const goToOutlineBtn = document.getElementById('go-to-outline');
const goToSettingsBtn = document.getElementById('go-to-settings');
const goToCharactersBtn = document.getElementById('go-to-characters');
const goToVisualizerBtn = document.getElementById('go-to-visualizer');

// Ray Ray elements
const rayRayContainer = document.getElementById('rayray-container');
const rayRayInput = document.getElementById('rayray-input');
const rayRayMessages = document.getElementById('rayray-messages');

// Show/Hide Ray Ray container
document.getElementById('toggle-rayray').addEventListener('click', toggleRayRay);

// Function to show/hide sections
function showSection(id) {
  console.log('showSection called with id:', id);
  sceneEditor.classList.add('hidden');
  outlineSection.classList.add('hidden');
  storyCheckSection.classList.add('hidden');
  settingsSection.classList.add('hidden');
  charactersSection.classList.add('hidden');
  settingEditor.classList.add('hidden');
  characterEditor.classList.add('hidden');
  
  // Also hide visualizer section
  const visualizerSection = document.getElementById('visualizer-section');
  if (visualizerSection) {
    visualizerSection.classList.add('hidden');
  }
  
  const targetSection = document.getElementById(id);
  if (targetSection) {
    targetSection.classList.remove('hidden');
    console.log('Successfully showed section:', id);
  } else {
    console.error('Section not found:', id);
  }
}

// Utility helpers
function saveProjectData(name, data) {
  localStorage.setItem(`project:${name}`, JSON.stringify(data));
}

function loadProjectData(name) {
  const raw = localStorage.getItem(`project:${name}`);
  return raw ? JSON.parse(raw) : null;
}

function listAllProjects() {
  return Object.keys(localStorage)
    .filter(k => k.startsWith('project:'))
    .map(k => k.slice(8));
}

// Settings and Characters helper functions
function addSettingToProject(project, setting) {
  if (!project.settings) {
    project.settings = [];
  }
  project.settings.push({
    id: generateId(),
    name: setting.name,
    description: setting.description,
    notes: setting.notes,
    dateCreated: new Date().toISOString()
  });
  saveProjectData(project.name, project);
}

function addCharacterToProject(project, character) {
  if (!project.characters) {
    project.characters = [];
  }
  project.characters.push({
    id: generateId(),
    name: character.name,
    description: character.description,
    background: character.background,
    notes: character.notes,
    dateCreated: new Date().toISOString()
  });
  saveProjectData(project.name, project);
}

function updateSettingInProject(project, settingId, updatedSetting) {
  if (!project.settings) return;
  const index = project.settings.findIndex(s => s.id === settingId);
  if (index !== -1) {
    project.settings[index] = {
      ...project.settings[index],
      ...updatedSetting,
      dateModified: new Date().toISOString()
    };
    saveProjectData(project.name, project);
  }
}

function updateCharacterInProject(project, characterId, updatedCharacter) {
  if (!project.characters) return;
  const index = project.characters.findIndex(c => c.id === characterId);
  if (index !== -1) {
    project.characters[index] = {
      ...project.characters[index],
      ...updatedCharacter,
      dateModified: new Date().toISOString()
    };
    saveProjectData(project.name, project);
  }
}

function deleteSettingFromProject(project, settingId) {
  if (!project.settings) return;
  project.settings = project.settings.filter(s => s.id !== settingId);
  saveProjectData(project.name, project);
}

function deleteCharacterFromProject(project, characterId) {
  if (!project.characters) return;
  project.characters = project.characters.filter(c => c.id !== characterId);
  saveProjectData(project.name, project);
}

function generateId() {
  return Date.now() + Math.random().toString(36).substr(2, 9);
}

// App state
let currentProject = null;
let currentSceneId = null;
let currentSettingIndex = null;
let currentCharacterIndex = null;

// ------------------------ UI Rendering ------------------------ //
function refreshProjectList() {
  projectList.innerHTML = '';
  listAllProjects().forEach(name => {
    const btn = document.createElement('button');
    btn.textContent = name;
    btn.addEventListener('click', () => switchProject(name));
    projectList.appendChild(btn);
  });
}

function renderOutline() {
  if (!currentProject) return;
  outlineContainer.innerHTML = '';
  currentProject.scenes.forEach(scene => {
    const btn = document.createElement('button');
    btn.textContent = scene.title || 'Scene';
    btn.addEventListener('click', () => openScene(scene.id));
    outlineContainer.appendChild(btn);
  });
}

function renderSettings() {
  if (!currentProject) return;
  settingsContainer.innerHTML = '';
  
  if (currentProject.settings && currentProject.settings.length > 0) {
    currentProject.settings.forEach(setting => {
      const settingDiv = document.createElement('div');
      settingDiv.className = 'setting-item';
      settingDiv.innerHTML = `
        <div class="setting-header">
          <h4>${setting.name}</h4>
          <div class="setting-actions">
            <button class="edit-btn" onclick="editSetting('${setting.id}')">Edit</button>
            <button class="delete-btn" onclick="deleteSetting('${setting.id}')">Delete</button>
          </div>
        </div>
        <p class="setting-description">${setting.description || 'No description'}</p>
        ${setting.notes ? `<div class="setting-notes">${setting.notes}</div>` : ''}
      `;
      settingsContainer.appendChild(settingDiv);
    });
  } else {
    settingsContainer.innerHTML = '<p>No settings created yet. Click "Add Setting" to create your first setting.</p>';
  }
}

function renderCharacters() {
  if (!currentProject) return;
  charactersContainer.innerHTML = '';
  
  if (currentProject.characters && currentProject.characters.length > 0) {
    currentProject.characters.forEach(character => {
      const characterDiv = document.createElement('div');
      characterDiv.className = 'character-item';
      characterDiv.innerHTML = `
        <div class="character-header">
          <h4>${character.name}</h4>
          <div class="character-actions">
            <button class="edit-btn" onclick="editCharacter('${character.id}')">Edit</button>
            <button class="delete-btn" onclick="deleteCharacter('${character.id}')">Delete</button>
          </div>
        </div>
        <p class="character-description">${character.description || 'No description'}</p>
        ${character.background ? `<div class="character-background"><strong>Background:</strong> ${character.background}</div>` : ''}
        ${character.notes ? `<div class="character-notes">${character.notes}</div>` : ''}
      `;
      charactersContainer.appendChild(characterDiv);
    });
  } else {
    charactersContainer.innerHTML = '<p>No characters created yet. Click "Add Character" to create your first character.</p>';
  }
}

function updateWordCount() {
  const text = sceneText.value.trim();
  const count = text ? text.split(/\s+/).length : 0;
  wordCount.textContent = `Words: ${count}`;
}

// ------------------------ Actions ------------------------ //
function createProject() {
  const name = newProjectInput.value.trim();
  if (!name) return;
  const data = {
    name,
    scenes: [],
    notes: [],
    storyCheck: '',
    settings: [],
    characters: [],
    createdAt: Date.now()
  };
  saveProjectData(name, data);
  newProjectInput.value = '';
  currentProject = data;
  refreshProjectList();
  switchProject(name);
}

function switchProject(name) {
  const data = loadProjectData(name);
  if (!data) return;
  currentProject = data;
  storyCheckInput.value = data.storyCheck || '';
  renderOutline();
  renderSettings();
  renderCharacters();
  storyCheckSection.classList.remove('hidden');
  outlineSection.classList.remove('hidden');
  sceneEditor.classList.add('hidden');
  settingEditor.classList.add('hidden');
  characterEditor.classList.add('hidden');
  settingsSection.classList.add('hidden');
  charactersSection.classList.add('hidden');
  
  // Also hide visualizer section
  const visualizerSection = document.getElementById('visualizer-section');
  if (visualizerSection) {
    visualizerSection.classList.add('hidden');
  }
  
  currentSceneId = null;
}

function saveStoryCheck() {
  if (!currentProject) return;
  currentProject.storyCheck = storyCheckInput.value;
  saveProjectData(currentProject.name, currentProject);
}

function addScene() {
  if (!currentProject) return;
  const id = `scene-${Date.now()}`;
  const scene = { id, title: `Scene ${currentProject.scenes.length + 1}` };
  currentProject.scenes.push(scene);
  saveProjectData(currentProject.name, currentProject);
  renderOutline();
}

function openScene(sceneId) {
  currentSceneId = sceneId;
  fetch(`projects/${currentProject.name}/scenes/${sceneId}.json`)
    .then(res => res.json())
    .then(data => {
      sceneTitle.textContent = `✍️ Editing ${data.title}`;
      sceneText.value = data.content || '';
      sceneGoal.value = data.goal || '';
      sceneEmotion.value = data.emotion || '';
      sceneCharacters.value = data.characters || '';
      desireSlider.value = data.desire || 0;
      conflictSlider.value = data.conflict || 0;
      revealSlider.value = data.reveal || 0;
      updateWordCount();
      showSection('scene-editor');
    });
}

function saveScene() {
  if (!currentProject || !currentSceneId) return;

  const data = {
    title: sceneTitle.textContent.replace('✍️ Editing ', ''),
    content: sceneText.value,
    goal: sceneGoal.value,
    emotion: sceneEmotion.value,
    characters: sceneCharacters.value,
    desire: parseInt(desireSlider.value),
    conflict: parseInt(conflictSlider.value),
    reveal: parseInt(revealSlider.value)
  };

  fetch(`projects/${currentProject.name}/scenes/${currentSceneId}.json`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data)
  }).then(() => {
    alert('Scene saved!');
  });
}

function closeScene() {
  sceneEditor.classList.add('hidden');
  outlineSection.classList.remove('hidden');
  currentSceneId = null;
}

// ------------------------ Settings Functions ------------------------ //
function addSetting() {
  if (!currentProject) return;
  
  currentSettingIndex = null;
  settingTitle.textContent = 'Add New Setting';
  settingName.value = '';
  settingDescription.value = '';
  settingNotes.value = '';
  
  settingEditor.classList.remove('hidden');
  settingsSection.classList.add('hidden');
}

function editSetting(settingId) {
  if (!currentProject) return;
  
  const setting = currentProject.settings.find(s => s.id === settingId);
  if (!setting) return;
  
  currentSettingIndex = settingId;
  settingTitle.textContent = 'Edit Setting';
  settingName.value = setting.name;
  settingDescription.value = setting.description || '';
  settingNotes.value = setting.notes || '';
  
  settingEditor.classList.remove('hidden');
  settingsSection.classList.add('hidden');
}

function saveSetting() {
  if (!currentProject) return;
  
  const name = settingName.value.trim();
  const description = settingDescription.value.trim();
  const notes = settingNotes.value.trim();
  
  if (!name) {
    alert('Please enter a setting name');
    return;
  }
  
  if (currentSettingIndex) {
    // Update existing setting
    updateSettingInProject(currentProject, currentSettingIndex, {
      name,
      description,
      notes
    });
  } else {
    // Add new setting
    addSettingToProject(currentProject, {
      name,
      description,
      notes
    });
  }
  
  renderSettings();
  closeSetting();
}

function closeSetting() {
  settingEditor.classList.add('hidden');
  settingsSection.classList.remove('hidden');
  currentSettingIndex = null;
}

function deleteSetting(settingId) {
  if (!currentProject) return;
  
  if (confirm('Are you sure you want to delete this setting?')) {
    deleteSettingFromProject(currentProject, settingId);
    renderSettings();
  }
}

// ------------------------ Characters Functions ------------------------ //
function addCharacter() {
  if (!currentProject) return;
  
  currentCharacterIndex = null;
  characterTitle.textContent = 'Add New Character';
  characterName.value = '';
  characterDescription.value = '';
  characterBackground.value = '';
  characterNotes.value = '';
  
  characterEditor.classList.remove('hidden');
  charactersSection.classList.add('hidden');
}

function editCharacter(characterId) {
  if (!currentProject) return;
  
  const character = currentProject.characters.find(c => c.id === characterId);
  if (!character) return;
  
  currentCharacterIndex = characterId;
  characterTitle.textContent = 'Edit Character';
  characterName.value = character.name;
  characterDescription.value = character.description || '';
  characterBackground.value = character.background || '';
  characterNotes.value = character.notes || '';
  
  characterEditor.classList.remove('hidden');
  charactersSection.classList.add('hidden');
}

function saveCharacter() {
  if (!currentProject) return;
  
  const name = characterName.value.trim();
  const description = characterDescription.value.trim();
  const background = characterBackground.value.trim();
  const notes = characterNotes.value.trim();
  
  if (!name) {
    alert('Please enter a character name');
    return;
  }
  
  if (currentCharacterIndex) {
    // Update existing character
    updateCharacterInProject(currentProject, currentCharacterIndex, {
      name,
      description,
      background,
      notes
    });
  } else {
    // Add new character
    addCharacterToProject(currentProject, {
      name,
      description,
      background,
      notes
    });
  }
  
  renderCharacters();
  closeCharacter();
}

function closeCharacter() {
  characterEditor.classList.add('hidden');
  charactersSection.classList.remove('hidden');
  currentCharacterIndex = null;
}

function deleteCharacter(characterId) {
  if (!currentProject) return;
  
  if (confirm('Are you sure you want to delete this character?')) {
    deleteCharacterFromProject(currentProject, characterId);
    renderCharacters();
  }
}

// Ray Ray Chat Functionality
function toggleRayRay() {
  const container = document.getElementById('rayray-container');
  container.classList.toggle('open');
}

function sendRayRay() {
  const input = document.getElementById('rayray-input');
  const msg = input.value.trim();
  if (!msg) return;

  // Display user message
  const messages = document.getElementById('rayray-messages');
  const userMsg = document.createElement('div');
  userMsg.style.color = '#85e1ff';
  userMsg.style.marginBottom = '8px';
  userMsg.textContent = "You: " + msg;
  messages.appendChild(userMsg);

  // Clear input
  input.value = "";

  // Simulate Ray Ray response
  setTimeout(() => {
    const botMsg = document.createElement('div');
    botMsg.style.color = '#ffe877';
    botMsg.style.marginBottom = '8px';
    
    if (currentProject) {
      botMsg.textContent = `Ray Ray: I'm analyzing your project "${currentProject.name}". ${msg}`;
    } else {
      botMsg.textContent = "Ray Ray: Create a project first, then I can help you analyze your writing!";
    }
    
    messages.appendChild(botMsg);
    messages.scrollTop = messages.scrollHeight;
  }, 700);
}

// Visualizer Functions
function toggleLayer(layerId) {
  const layer = document.getElementById(layerId);
  if (layer) {
    layer.style.display = layer.style.display === 'none' ? 'block' : 'none';
  }
}

function showVisualizer() {
  showSection('visualizer-section');
}

// ------------------------ Event Listeners ------------------------ //
window.addEventListener('load', refreshProjectList);
createProjectBtn.addEventListener('click', createProject);
saveStoryCheckBtn.addEventListener('click', saveStoryCheck);
addSceneBtn.addEventListener('click', addScene);
saveSceneBtn.addEventListener('click', saveScene);
closeSceneBtn.addEventListener('click', closeScene);
sceneText.addEventListener('input', updateWordCount);

// Settings event listeners
addSettingBtn.addEventListener('click', addSetting);
saveSettingBtn.addEventListener('click', saveSetting);
closeSettingBtn.addEventListener('click', closeSetting);

// Characters event listeners
addCharacterBtn.addEventListener('click', addCharacter);
saveCharacterBtn.addEventListener('click', saveCharacter);
closeCharacterBtn.addEventListener('click', closeCharacter);

// Navigation event listeners
goToOutlineBtn.addEventListener('click', () => {
  console.log('Going to outline');
  showSection('outline');
});
goToSettingsBtn.addEventListener('click', () => {
  console.log('Going to settings');
  showSection('settings-docs');
});
goToCharactersBtn.addEventListener('click', () => {
  console.log('Going to characters');
  showSection('character-docs');
});
goToVisualizerBtn.addEventListener('click', () => {
  console.log('Going to visualizer');
  showSection('visualizer-section');
});
