def generate_fallback_prompts(chapter_text: str, missing_elements: list) -> list:
    prompts = []
    
    fallback_templates = {
        "desire": "Can you check if the character expresses a want, need, or goal in this chapter?",
        "stakes": "Can you check if the character has anything meaningful to gain or lose in this chapter?",
        "conflict": "Is there anything in the chapter that opposes, resists, or complicates the character‚Äôs desire?",
        "decision": "Can you check if the character makes a meaningful choice that affects the story?",
        "change": "Can you see if anything is different by the end of the chapter ‚Äî emotionally, relationally, or narratively?"
    }

    for element in missing_elements:
        if element in fallback_templates:
            prompt = {
                "element": element,
                "prompt": fallback_templates[element],
                "input": chapter_text
            }
            prompts.append(prompt)

    return prompts


example usage:
chapter_text = "She stood in the hallway, gripping the envelope. Outside, the rain had stopped, but she hadn‚Äôt moved."

missing = ["decision", "change"]

fallbacks = generate_fallback_prompts(chapter_text, missing)

for p in fallbacks:
    print(f"\nüîÅ Fallback for {p['element'].upper()}:")
    print("Prompt:", p["prompt"])

