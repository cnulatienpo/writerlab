# Step 1: Extract initial scores
initial_scores = extract_element_scores_v2("chapter_123", deepseek_response, debug=True)

# Step 2: Get missing or uncertain elements
missing = initial_scores["missing_elements"]

if missing:
    print("\nðŸ›  Running fallbacks for:", missing)
    
    # Step 3: Generate fallback prompts
    fallbacks = generate_fallback_prompts(chapter_text, missing)

    # Step 4: Collect fallback results
    fallback_results = {}

    for fb in fallbacks:
        element = fb["element"]
        prompt = fb["prompt"]
        input_text = fb["input"]

        # ðŸ§  Send prompt + chapter text to DeepSeek
        # (this depends on your API setup; here's a placeholder)
        response_text = call_deepseek_api(prompt, input_text)  # You build this
        score_match = re.search(r"(none|low|medium|high|uncertain)", response_text.lower())
        score = score_match.group(1) if score_match else "uncertain"

        fallback_results[element] = {"potency": score}

    # Step 5: Merge fallback results into original scores
    final_scores = merge_element_scores(initial_scores, fallback_results)

else:
    final_scores = initial_scores


output example:
{
  "chapter_id": "chapter_123",
  "element_scores": {
    "desire": {
      "present": true,
      "potency": "high",
      "confidence": "high"
    },
    "stakes": {
      "present": true,
      "potency": "medium",
      "confidence": "high"
    },
    "conflict": {
      "present": true,
      "potency": "medium",
      "confidence": "high"
    },
    "decision": {
      "present": true,
      "potency": "medium",
      "confidence": "fallback"
    },
    "change": {
      "present": true,
      "potency": "high",
      "confidence": "fallback"
    }
  }
}
